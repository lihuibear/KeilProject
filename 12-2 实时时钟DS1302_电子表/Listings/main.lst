C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\software\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          
   3          struct sTime {  //日期时间结构体定义
   4              unsigned int  year;
   5              unsigned char mon;
   6              unsigned char day;
   7              unsigned char hour;
   8              unsigned char min;
   9              unsigned char sec;
  10              unsigned char week;
  11          };
  12          
  13          bit flag200ms = 1;  //200ms定时标志
  14          struct sTime bufTime;  //日期时间缓冲区
  15          unsigned char setIndex = 0;  //时间设置索引
  16          unsigned char T0RH = 0;  //T0重载值的高字节
  17          unsigned char T0RL = 0;  //T0重载值的低字节
  18          
  19          void ConfigTimer0(unsigned int ms);
  20          void RefreshTimeShow();
  21          extern void InitDS1302();
  22          extern void GetRealTime(struct sTime *time);
  23          extern void SetRealTime(struct sTime *time);
  24          extern void KeyScan();
  25          extern void KeyDriver();
  26          extern void InitLcd1602();
  27          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  28          extern void LcdSetCursor(unsigned char x, unsigned char y);
  29          extern void LcdOpenCursor(void);
  30          extern void LcdCloseCursor(void);
  31          
  32          void main()
  33          {
  34   1          unsigned char psec=0xAA;  //秒备份，初值AA确保首次读取时间后会刷新显示
  35   1      
  36   1          EA = 1;             //开总中断
  37   1          ConfigTimer0(1);  //T0定时1ms
  38   1          InitDS1302();     //初始化实时时钟
  39   1          InitLcd1602();    //初始化液晶
  40   1          
  41   1          //初始化屏幕上固定不变的内容
  42   1          LcdShowStr(3, 0, "20  -  -  ");
  43   1          LcdShowStr(4, 1, "  :  :  ");
  44   1          
  45   1          while (1)
  46   1          {
  47   2              KeyDriver();  //调用按键驱动
  48   2              if (flag200ms && (setIndex == 0))
  49   2              {                             //每隔200ms且未处于设置状态时，
  50   3                  flag200ms = 0;
  51   3                  GetRealTime(&bufTime);    //获取当前时间
  52   3                  if (psec != bufTime.sec)  //检测到时间有变化时刷新显示
  53   3                  {
  54   4                      RefreshTimeShow();
C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 2   

  55   4                      psec = bufTime.sec;   //用当前值更新上次秒数
  56   4                  }
  57   3              }
  58   2          }
  59   1      }
  60          /* 将一个BCD码字节显示到屏幕上，(x,y)-屏幕起始坐标，bcd-待显示BCD码 */
  61          void ShowBcdByte(unsigned char x, unsigned char y, unsigned char bcd)
  62          {
  63   1          unsigned char str[4];
  64   1          
  65   1          str[0] = (bcd >> 4) + '0';
  66   1          str[1] = (bcd&0x0F) + '0';
  67   1          str[2] = '\0';
  68   1          LcdShowStr(x, y, str);
  69   1      }
  70          /* 刷新日期时间的显示 */
  71          void RefreshTimeShow()
  72          {
  73   1          ShowBcdByte(5,  0, bufTime.year);
  74   1          ShowBcdByte(8,  0, bufTime.mon);
  75   1          ShowBcdByte(11, 0, bufTime.day);
  76   1          ShowBcdByte(4,  1, bufTime.hour);
  77   1          ShowBcdByte(7,  1, bufTime.min);
  78   1          ShowBcdByte(10, 1, bufTime.sec);
  79   1      }
  80          /* 刷新当前设置位的光标指示 */
  81          void RefreshSetShow()
  82          {
  83   1          switch (setIndex)
  84   1          {
  85   2              case 1:  LcdSetCursor(5,  0); break;
  86   2              case 2:  LcdSetCursor(6,  0); break;
  87   2              case 3:  LcdSetCursor(8,  0); break;
  88   2              case 4:  LcdSetCursor(9,  0); break;
  89   2              case 5:  LcdSetCursor(11, 0); break;
  90   2              case 6:  LcdSetCursor(12, 0); break;
  91   2              case 7:  LcdSetCursor(4,  1); break;
  92   2              case 8:  LcdSetCursor(5,  1); break;
  93   2              case 9:  LcdSetCursor(7,  1); break;
  94   2              case 10: LcdSetCursor(8,  1); break;
  95   2              case 11: LcdSetCursor(10, 1); break;
  96   2              case 12: LcdSetCursor(11, 1); break;
  97   2              default:  break;
  98   2          }
  99   1      }
 100          /* 递增一个BCD码的高位 */
 101          unsigned char IncBcdHigh(unsigned char bcd)
 102          {
 103   1          if ((bcd&0xF0) < 0x90)
 104   1              bcd += 0x10;
 105   1          else
 106   1              bcd &= 0x0F;
 107   1          
 108   1          return bcd;
 109   1      }
 110          /* 递增一个BCD码的低位 */
 111          unsigned char IncBcdLow(unsigned char bcd)
 112          {
 113   1          if ((bcd&0x0F) < 0x09)
 114   1              bcd += 0x01;
 115   1          else
 116   1              bcd &= 0xF0;
C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 3   

 117   1          
 118   1          return bcd;
 119   1      }
 120          /* 递减一个BCD码的高位 */
 121          unsigned char DecBcdHigh(unsigned char bcd)
 122          {
 123   1          if ((bcd&0xF0) > 0x00)
 124   1              bcd -= 0x10;
 125   1          else
 126   1              bcd |= 0x90;
 127   1          
 128   1          return bcd;
 129   1      }
 130          /* 递减一个BCD码的低位 */
 131          unsigned char DecBcdLow(unsigned char bcd)
 132          {
 133   1          if ((bcd&0x0F) > 0x00)
 134   1              bcd -= 0x01;
 135   1          else
 136   1              bcd |= 0x09;
 137   1          
 138   1          return bcd;
 139   1      }
 140          /* 递增时间当前设置位的值 */
 141          void IncSetTime()
 142          {
 143   1          switch (setIndex)
 144   1          {
 145   2              case 1:  bufTime.year = IncBcdHigh(bufTime.year); break;
 146   2              case 2:  bufTime.year = IncBcdLow(bufTime.year);  break;
 147   2              case 3:  bufTime.mon  = IncBcdHigh(bufTime.mon);  break;
 148   2              case 4:  bufTime.mon  = IncBcdLow(bufTime.mon);   break;
 149   2              case 5:  bufTime.day  = IncBcdHigh(bufTime.day);  break;
 150   2              case 6:  bufTime.day  = IncBcdLow(bufTime.day);   break;
 151   2              case 7:  bufTime.hour = IncBcdHigh(bufTime.hour); break;
 152   2              case 8:  bufTime.hour = IncBcdLow(bufTime.hour);  break;
 153   2              case 9:  bufTime.min  = IncBcdHigh(bufTime.min);  break;
 154   2              case 10: bufTime.min  = IncBcdLow(bufTime.min);   break;
 155   2              case 11: bufTime.sec  = IncBcdHigh(bufTime.sec);  break;
 156   2              case 12: bufTime.sec  = IncBcdLow(bufTime.sec);   break;
 157   2              default:  break;
 158   2          }
 159   1          RefreshTimeShow();
 160   1          RefreshSetShow();
 161   1      }
 162          /* 递减时间当前设置位的值 */
 163          void DecSetTime()
 164          {
 165   1          switch (setIndex)
 166   1          {
 167   2              case 1:  bufTime.year = DecBcdHigh(bufTime.year); break;
 168   2              case 2:  bufTime.year = DecBcdLow(bufTime.year);  break;
 169   2              case 3:  bufTime.mon  = DecBcdHigh(bufTime.mon);  break;
 170   2              case 4:  bufTime.mon  = DecBcdLow(bufTime.mon);   break;
 171   2              case 5:  bufTime.day  = DecBcdHigh(bufTime.day);  break;
 172   2              case 6:  bufTime.day  = DecBcdLow(bufTime.day);   break;
 173   2              case 7:  bufTime.hour = DecBcdHigh(bufTime.hour); break;
 174   2              case 8:  bufTime.hour = DecBcdLow(bufTime.hour);  break;
 175   2              case 9:  bufTime.min  = DecBcdHigh(bufTime.min);  break;
 176   2              case 10: bufTime.min  = DecBcdLow(bufTime.min);   break;
 177   2              case 11: bufTime.sec  = DecBcdHigh(bufTime.sec);  break;
 178   2              case 12: bufTime.sec  = DecBcdLow(bufTime.sec);   break;
C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 4   

 179   2              default:  break;
 180   2          }
 181   1          RefreshTimeShow();
 182   1          RefreshSetShow();
 183   1      }
 184          /* 右移时间设置位 */
 185          void RightShiftTimeSet()
 186          {
 187   1          if (setIndex != 0)
 188   1          {
 189   2              if (setIndex < 12)
 190   2                  setIndex++;
 191   2              else
 192   2                  setIndex = 1;
 193   2              RefreshSetShow();
 194   2          }
 195   1      }
 196          /* 左移时间设置位 */
 197          void LeftShiftTimeSet()
 198          {
 199   1          if (setIndex != 0)
 200   1          {
 201   2              if (setIndex > 1)
 202   2                  setIndex--;
 203   2              else
 204   2                  setIndex = 12;
 205   2              RefreshSetShow();
 206   2          }
 207   1      }
 208          /* 进入时间设置状态 */
 209          void EnterTimeSet()
 210          {
 211   1          setIndex = 2;         //把设置索引设置为2，即可进入设置状态
 212   1          LeftShiftTimeSet(); //再利用现成的左移操作移到位置1并完成显示刷新
 213   1          LcdOpenCursor();     //打开光标闪烁效果
 214   1      }
 215          /* 退出时间设置状态，save-是否保存当前设置的时间值 */
 216          void ExitTimeSet(bit save)
 217          {
 218   1          setIndex = 0;     //把设置索引设置为0，即可退出设置状态
 219   1          if (save)         //需保存时即把当前设置时间写入DS1302
 220   1          {
 221   2              SetRealTime(&bufTime);
 222   2          }
 223   1          LcdCloseCursor(); //关闭光标显示
 224   1      }
 225          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 226          void KeyAction(unsigned char keycode)
 227          {
 228   1          if  ((keycode>='0') && (keycode<='9'))  //本例中不响应字符键
 229   1          {
 230   2          }
 231   1          else if (keycode == 0x26)  //向上键，递增当前设置位的值
 232   1          {
 233   2              IncSetTime();
 234   2          }
 235   1          else if (keycode == 0x28)  //向下键，递减当前设置位的值
 236   1          {
 237   2              DecSetTime();
 238   2          }
 239   1          else if (keycode == 0x25)  //向左键，向左切换设置位
 240   1          {
C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 5   

 241   2              LeftShiftTimeSet();
 242   2          }
 243   1          else if (keycode == 0x27)  //向右键，向右切换设置位
 244   1          {
 245   2              RightShiftTimeSet();
 246   2          }
 247   1          else if (keycode == 0x0D)  //回车键，进入设置模式/启用当前设置值
 248   1          {
 249   2              if (setIndex == 0)  //不处于设置状态时，进入设置状态
 250   2              {
 251   3                  EnterTimeSet();
 252   3              }
 253   2              else                //已处于设置状态时，保存时间并退出设置状态
 254   2              {
 255   3                  ExitTimeSet(1);
 256   3              }
 257   2          }
 258   1          else if (keycode == 0x1B)  //Esc键，取消当前设置
 259   1          {
 260   2              ExitTimeSet(0);
 261   2          }
 262   1      }
 263          /* 配置并启动T0，ms-T0定时时间 */
 264          void ConfigTimer0(unsigned int ms)
 265          {
 266   1          unsigned long tmp;  //临时变量
 267   1          
 268   1          tmp = 11059200 / 12;       //定时器计数频率
 269   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 270   1          tmp = 65536 - tmp;         //计算定时器重载值
 271   1          tmp = tmp + 28;            //补偿中断响应延时造成的误差
 272   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 273   1          T0RL = (unsigned char)tmp;
 274   1          TMOD &= 0xF0;   //清零T0的控制位
 275   1          TMOD |= 0x01;   //配置T0为模式1
 276   1          TH0 = T0RH;     //加载T0重载值
 277   1          TL0 = T0RL;
 278   1          ET0 = 1;        //使能T0中断
 279   1          TR0 = 1;        //启动T0
 280   1      }
 281          /* T0中断服务函数，执行按键扫描和200ms定时 */
 282          void InterruptTimer0() interrupt 1
 283          {
 284   1          static unsigned char tmr200ms = 0;
 285   1          
 286   1          TH0 = T0RH;  //重新加载重载值
 287   1          TL0 = T0RL;
 288   1          KeyScan();   //按键扫描
 289   1          tmr200ms++;
 290   1          if (tmr200ms >= 200)  //定时200ms
 291   1          {
 292   2              tmr200ms = 0;
 293   2              flag200ms = 1;
 294   2          }
 295   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1043    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.54   MAIN                                                                  02/17/2024 21:45:27 PAGE 6   

   DATA SIZE        =     12      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
