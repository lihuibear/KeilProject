C51 COMPILER V9.54   MAIN                                                                  02/16/2024 22:20:39 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\software\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          #include <reg52.h>
   3          
   4          unsigned char T0RH = 0;  //T0重载值的高字节
   5          unsigned char T0RL = 0;  //T0重载值的低字节
   6          
   7          void InitShowStr();
   8          void ConfigTimer0(unsigned int ms);
   9          extern void InitLcd1602();
  10          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  11          extern void E2Read(unsigned char *buf, unsigned char addr, unsigned char len);
  12          extern void E2Write(unsigned char *buf, unsigned char addr, unsigned char len);
  13          extern void UartDriver();
  14          extern void ConfigUART(unsigned int baud);
  15          extern void UartRxMonitor(unsigned char ms);
  16          extern void UartWrite(unsigned char *buf, unsigned char len);
  17          
  18          void main()
  19          {
  20   1          EA = 1;            //开总中断
  21   1          ConfigTimer0(1);   //配置T0定时1ms
  22   1          ConfigUART(9600);  //配置波特率为9600
  23   1          InitLcd1602();     //初始化液晶
  24   1          InitShowStr();     //初始显示内容
  25   1          
  26   1          while (1)
  27   1          {
  28   2              UartDriver();  //调用串口驱动
  29   2          }
  30   1      }
  31          /* 处理液晶屏初始显示内容 */
  32          void InitShowStr()
  33          {
  34   1          unsigned char str[17];
  35   1          
  36   1          str[16] = '\0';         //在最后添加字符串结束符，确保字符串可以结束
  37   1          E2Read(str, 0x20, 16);  //读取第一行字符串，其E2起始地址为0x20
  38   1          LcdShowStr(0, 0, str);  //显示到液晶屏
  39   1          E2Read(str, 0x40, 16);  //读取第二行字符串，其E2起始地址为0x40
  40   1          LcdShowStr(0, 1, str);  //显示到液晶屏
  41   1      }
  42          /* 内存比较函数，比较两个指针所指向的内存数据是否相同，
  43             ptr1-待比较指针1，ptr2-待比较指针2，len-待比较长度
  44             返回值-两段内存数据完全相同时返回1，不同返回0 */
  45          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
  46          {
  47   1          while (len--)
  48   1          {
  49   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
  50   2              {
  51   3                  return 0;
  52   3              }
  53   2          }
  54   1          return 1;  //比较完全部长度数据都相等则返回1
C51 COMPILER V9.54   MAIN                                                                  02/16/2024 22:20:39 PAGE 2   

  55   1      }
  56          /* 将一字符串整理成16字节的固定长度字符串，不足部分补空格
  57             out-整理后的字符串输出指针，in-待整理字符串指针 */
  58          void TrimString16(unsigned char *out, unsigned char *in)
  59          {
  60   1          unsigned char i = 0;
  61   1          
  62   1          while (*in != '\0')  //拷贝字符串直到输入字符串结束
  63   1          {
  64   2              *out++ = *in++;
  65   2              i++;
  66   2              if (i >= 16)    //当拷贝长度已达到16字节时，强制跳出循环
  67   2              {
  68   3                  break;
  69   3              }
  70   2          }
  71   1          for ( ; i<16; i++)  //如不足16个字节则用空格补齐
  72   1          {
  73   2              *out++ = ' ';
  74   2          }
  75   1          *out = '\0';        //最后添加结束符
  76   1      }
  77          /* 串口动作函数，根据接收到的命令帧执行响应的动作
  78             buf-接收到的命令帧指针，len-命令帧长度 */
  79          void UartAction(unsigned char *buf, unsigned char len)
  80          {
  81   1          unsigned char i;
  82   1          unsigned char str[17];
  83   1          unsigned char code cmd0[] = "showstr1 ";  //第一行字符显示命令
  84   1          unsigned char code cmd1[] = "showstr2 ";  //第二行字符显示命令
  85   1          unsigned char code cmdLen[] = {           //命令长度汇总表
  86   1              sizeof(cmd0)-1, sizeof(cmd1)-1,
  87   1          };
  88   1          unsigned char code *cmdPtr[] = {          //命令指针汇总表
  89   1              &cmd0[0],  &cmd1[0],
  90   1          };
  91   1      
  92   1          for (i=0; i<sizeof(cmdLen); i++)  //遍历命令列表，查找相同命令
  93   1          {
  94   2              if (len >= cmdLen[i])  //首先接收到的数据长度要不小于命令长度
  95   2              {
  96   3                  if (CmpMemory(buf, cmdPtr[i], cmdLen[i]))  //比较相同时退出循环
  97   3                  {
  98   4                      break;
  99   4                  }
 100   3              }
 101   2          }
 102   1          switch (i) //根据比较结果执行相应命令
 103   1          {
 104   2              case 0:
 105   2                  buf[len] = '\0';                   //为接收到的字符串添加结束符
 106   2                  TrimString16(str, buf+cmdLen[0]);  //整理成16字节固定长度字符串
 107   2                  LcdShowStr(0, 0, str);             //显示字符串1
 108   2                  E2Write(str, 0x20, sizeof(str));   //保存字符串1，起始地址为0x20
 109   2                  break;
 110   2              case 1:
 111   2                  buf[len] = '\0';                   //为接收到的字符串添加结束符
 112   2                  TrimString16(str, buf+cmdLen[1]);  //整理成16字节固定长度字符串
 113   2                  LcdShowStr(0, 1, str);             //显示字符串1
 114   2                  E2Write(str, 0x40, sizeof(str));   //保存字符串2，起始地址为0x40
 115   2                  break;
 116   2              default:   //未找到相符命令时，给上机发送“错误命令”的提示
C51 COMPILER V9.54   MAIN                                                                  02/16/2024 22:20:39 PAGE 3   

 117   2                  UartWrite("bad command.\r\n", sizeof("bad command.\r\n")-1);
 118   2                  return;
 119   2          }
 120   1          buf[len++] = '\r';  //有效命令被执行后，在原命令帧之后添加
 121   1          buf[len++] = '\n';  //回车换行符后返回给上位机，表示已执行
 122   1          UartWrite(buf, len);
 123   1      }
 124          /* 配置并启动T0，ms-T0定时时间 */
 125          void ConfigTimer0(unsigned int ms)
 126          {
 127   1          unsigned long tmp;  //临时变量
 128   1          
 129   1          tmp = 11059200 / 12;      //定时器计数频率
 130   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 131   1          tmp = 65536 - tmp;        //计算定时器重载值
 132   1          tmp = tmp + 32;           //补偿中断响应延时造成的误差
 133   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 134   1          T0RL = (unsigned char)tmp;
 135   1          TMOD &= 0xF0;   //清零T0的控制位
 136   1          TMOD |= 0x01;   //配置T0为模式1
 137   1          TH0 = T0RH;     //加载T0重载值
 138   1          TL0 = T0RL;
 139   1          ET0 = 1;        //使能T0中断
 140   1          TR0 = 1;        //启动T0
 141   1      }
 142          /* T0中断服务函数，执行串口接收监控和蜂鸣器驱动 */
 143          void InterruptTimer0() interrupt 1
 144          {
 145   1          TH0 = T0RH;  //重新加载重载值
 146   1          TL0 = T0RL;
 147   1          UartRxMonitor(1);  //串口接收监控
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    676    ----
   CONSTANT SIZE    =     41    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      59
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
