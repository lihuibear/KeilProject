C51 COMPILER V9.54   MAIN                                                                  02/14/2024 22:34:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\software\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          #include <reg52.h>
   3          
   4          sbit BUZZ = P1^6;  //蜂鸣器控制引脚
   5          
   6          bit flagBuzzOn = 0;   //蜂鸣器启动标志
   7          unsigned char T0RH = 0;  //T0重载值的高字节
   8          unsigned char T0RL = 0;  //T0重载值的低字节
   9          
  10          void ConfigTimer0(unsigned int ms);
  11          extern void UartDriver();
  12          extern void ConfigUART(unsigned int baud);
  13          extern void UartRxMonitor(unsigned char ms);
  14          extern void UartWrite(unsigned char *buf, unsigned char len);
  15          extern void InitLcd1602();
  16          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  17          extern void LcdAreaClear(unsigned char x, unsigned char y, unsigned char len);
  18          
  19          void main ()
  20          {
  21   1          EA = 1;            //开总中断
  22   1          ConfigTimer0(1);   //配置T0定时1ms
  23   1          ConfigUART(9600);  //配置波特率为9600
  24   1          InitLcd1602();     //初始化液晶
  25   1          
  26   1          while (1)
  27   1          {
  28   2              UartDriver();  //调用串口驱动
  29   2          }
  30   1      }
  31          /* 内存比较函数，比较两个指针所指向的内存数据是否相同，
  32             ptr1-待比较指针1，ptr2-待比较指针2，len-待比较长度
  33             返回值-两段内存数据完全相同时返回1，不同返回0 */
  34          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
  35          {
  36   1          while (len--)
  37   1          {
  38   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
  39   2              {
  40   3                  return 0;
  41   3              }
  42   2          }
  43   1          return 1;  //比较完全部长度数据都相等则返回1
  44   1      }
  45          /* 串口动作函数，根据接收到的命令帧执行响应的动作
  46             buf-接收到的命令帧指针，len-命令帧长度 */
  47          void UartAction(unsigned char *buf, unsigned char len)
  48          {
  49   1          unsigned char i;
  50   1          unsigned char code cmd0[] = "buzz on";   //开蜂鸣器命令
  51   1          unsigned char code cmd1[] = "buzz off";  //关蜂鸣器命令
  52   1          unsigned char code cmd2[] = "showstr ";  //字符串显示命令
  53   1          unsigned char code cmdLen[] = {          //命令长度汇总表
  54   1              sizeof(cmd0)-1, sizeof(cmd1)-1, sizeof(cmd2)-1,
C51 COMPILER V9.54   MAIN                                                                  02/14/2024 22:34:25 PAGE 2   

  55   1          };
  56   1          unsigned char code *cmdPtr[] = {         //命令指针汇总表
  57   1              &cmd0[0],  &cmd1[0],  &cmd2[0],
  58   1          };
  59   1      
  60   1          for (i=0; i<sizeof(cmdLen); i++)  //遍历命令列表，查找相同命令
  61   1          {
  62   2              if (len >= cmdLen[i])  //首先接收到的数据长度要不小于命令长度
  63   2              {
  64   3                  if (CmpMemory(buf, cmdPtr[i], cmdLen[i]))  //比较相同时退出循环
  65   3                  {
  66   4                      break;
  67   4                  }
  68   3              }
  69   2          }
  70   1          switch (i)  //循环退出时i的值即是当前命令的索引值
  71   1          {
  72   2              case 0:
  73   2                  flagBuzzOn = 1; //开启蜂鸣器
  74   2                  break;
  75   2              case 1:
  76   2                  flagBuzzOn = 0; //关闭蜂鸣器
  77   2                  break;
  78   2              case 2:
  79   2                  buf[len] = '\0';  //为接收到的字符串添加结束符
  80   2                  LcdShowStr(0, 0, buf+cmdLen[2]);  //显示命令后的字符串
  81   2                  i = len - cmdLen[2];              //计算有效字符个数
  82   2                  if (i < 16)  //有效字符少于16时，清除液晶上的后续字符位
  83   2                  {
  84   3                      LcdAreaClear(i, 0, 16-i);
  85   3                  }
  86   2                  break;
  87   2              default:   //未找到相符命令时，给上机发送“错误命令”的提示
  88   2                  UartWrite("bad command.\r\n", sizeof("bad command.\r\n")-1);
  89   2                  return;
  90   2          }
  91   1          buf[len++] = '\r';  //有效命令被执行后，在原命令帧之后添加
  92   1          buf[len++] = '\n';  //回车换行符后返回给上位机，表示已执行
  93   1          UartWrite(buf, len);
  94   1      }
  95          /* 配置并启动T0，ms-T0定时时间 */
  96          void ConfigTimer0(unsigned int ms)
  97          {
  98   1          unsigned long tmp;  //临时变量
  99   1          
 100   1          tmp = 11059200 / 12;      //定时器计数频率
 101   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 102   1          tmp = 65536 - tmp;        //计算定时器重载值
 103   1          tmp = tmp + 32;           //补偿中断响应延时造成的误差
 104   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 105   1          T0RL = (unsigned char)tmp;
 106   1          TMOD &= 0xF0;   //清零T0的控制位
 107   1          TMOD |= 0x01;   //配置T0为模式1
 108   1          TH0 = T0RH;     //加载T0重载值
 109   1          TL0 = T0RL;
 110   1          ET0 = 1;        //使能T0中断
 111   1          TR0 = 1;        //启动T0
 112   1      }
 113          /* T0中断服务函数，执行串口接收监控和蜂鸣器驱动 */
 114          void InterruptTimer0() interrupt 1
 115          {
 116   1          TH0 = T0RH;  //重新加载重载值
C51 COMPILER V9.54   MAIN                                                                  02/14/2024 22:34:25 PAGE 3   

 117   1          TL0 = T0RL;
 118   1          if (flagBuzzOn)  //执行蜂鸣器鸣叫或关闭
 119   1              BUZZ = ~BUZZ;
 120   1          else
 121   1              BUZZ = 1;
 122   1          UartRxMonitor(1);  //串口接收监控
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    486    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
