C51 COMPILER V9.54   MAIN                                                                  02/14/2024 16:53:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\software\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          
   3          sbit ADDR3 = P1^3;
   4          sbit ENLED = P1^4;
   5          
   6          unsigned char code LedChar[] = {  //数码管显示字符转换表
   7              0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
   8              0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
   9          };
  10          unsigned char LedBuff[7] = {  //数码管+独立LED显示缓冲区
  11              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  12          };
  13          unsigned char T0RH = 0;  //T0重载值的高字节
  14          unsigned char T0RL = 0;  //T0重载值的低字节
  15          unsigned char RxdByte = 0;  //串口接收到的字节
  16          
  17          void ConfigTimer0(unsigned int ms);
  18          void ConfigUART(unsigned int baud);
  19          
  20          void main()
  21          {
  22   1          EA = 1;       //使能总中断
  23   1          ENLED = 0;    //选择数码管和独立LED
  24   1          ADDR3 = 1;
  25   1          ConfigTimer0(1);   //配置T0定时1ms
  26   1          ConfigUART(9600);  //配置波特率为9600
  27   1          
  28   1          while (1)
  29   1          {   //将接收字节在数码管上以十六进制形式显示出来
  30   2              LedBuff[0] = LedChar[RxdByte & 0x0F];
  31   2              LedBuff[1] = LedChar[RxdByte >> 4];
  32   2          }
  33   1      }
  34          /* 配置并启动T0，ms-T0定时时间 */
  35          void ConfigTimer0(unsigned int ms)
  36          {
  37   1          unsigned long tmp;  //临时变量
  38   1          
  39   1          tmp = 11059200 / 12;      //定时器计数频率
  40   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
  41   1          tmp = 65536 - tmp;        //计算定时器重载值
  42   1          tmp = tmp + 18;           //补偿中断响应延时造成的误差
  43   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
  44   1          T0RL = (unsigned char)tmp;
  45   1          TMOD &= 0xF0;   //清零T0的控制位
  46   1          TMOD |= 0x01;   //配置T0为模式1
  47   1          TH0 = T0RH;     //加载T0重载值
  48   1          TL0 = T0RL;
  49   1          ET0 = 1;        //使能T0中断
  50   1          TR0 = 1;        //启动T0
  51   1      }
  52          /* 串口配置函数，baud-通信波特率 */
  53          void ConfigUART(unsigned int baud)
  54          {
C51 COMPILER V9.54   MAIN                                                                  02/14/2024 16:53:10 PAGE 2   

  55   1          SCON  = 0x50;  //配置串口为模式1
  56   1          TMOD &= 0x0F;  //清零T1的控制位
  57   1          TMOD |= 0x20;  //配置T1为模式2
  58   1          TH1 = 256 - (11059200/12/32)/baud;  //计算T1重载值
  59   1          TL1 = TH1;     //初值等于重载值
  60   1          ET1 = 0;       //禁止T1中断
  61   1          ES  = 1;       //使能串口中断
  62   1          TR1 = 1;       //启动T1
  63   1      }
  64          /* 按键扫描函数，需在定时中断中调用 */
  65          void LedScan()
  66          {
  67   1          static unsigned char i = 0;  //动态扫描索引
  68   1          
  69   1          P0 = 0xFF;             //关闭所有段选位，显示消隐
  70   1          P1 = (P1 & 0xF8) | i;  //位选索引值赋值到P1口低3位
  71   1          P0 = LedBuff[i];       //缓冲区中索引位置的数据送到P0口
  72   1          if (i < 6)             //索引递增循环，遍历整个缓冲区
  73   1              i++;
  74   1          else
  75   1              i = 0;
  76   1      }
  77          /* T0中断服务函数，完成LED扫描 */
  78          void InterruptTimer0() interrupt 1
  79          {
  80   1          TH0 = T0RH;  //重新加载重载值
  81   1          TL0 = T0RL;
  82   1          LedScan();   //LED扫描显示
  83   1      }
  84          /* UART中断服务函数 */
  85          void InterruptUART() interrupt 4
  86          {
  87   1          if (RI)  //接收到字节
  88   1          {
  89   2              RI = 0;  //手动清零接收中断标志位
  90   2              RxdByte = SBUF;  //接收到的数据保存到接收字节变量中
  91   2              SBUF = RxdByte;  //接收到的数据又直接发回，叫作-"echo"，
  92   2                               //用以提示用户输入的信息是否已正确接收
  93   2          }
  94   1          if (TI)  //字节发送完毕
  95   1          {
  96   2              TI = 0;  //手动清零发送中断标志位
  97   2          }
  98   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    276    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
