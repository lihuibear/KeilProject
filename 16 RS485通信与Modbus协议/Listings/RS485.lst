C51 COMPILER V9.54   RS485                                                                 02/17/2024 22:29:09 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE RS485
OBJECT MODULE PLACED IN .\Objects\RS485.obj
COMPILER INVOKED BY: D:\software\Keil_v5\C51\BIN\C51.EXE RS485.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\RS485.lst) TABS(2) OBJECT(.\Objects\RS485.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          
   4          sbit RS485_DIR = P1^7;  //RS485方向选择引脚
   5          
   6          bit flagFrame = 0;  //帧接收完成标志，即接收到一帧新数据
   7          bit flagTxd = 0;    //单字节发送完成标志，用来替代TXD中断标志位
   8          unsigned char cntRxd = 0;   //接收字节计数器
   9          unsigned char pdata bufRxd[64];  //接收字节缓冲区
  10          
  11          extern void UartAction(unsigned char *buf, unsigned char len);
  12          
  13          /* 串口配置函数，baud-通信波特率 */
  14          void ConfigUART(unsigned int baud)
  15          {
  16   1          RS485_DIR = 0; //RS485设置为接收方向
  17   1          SCON  = 0x50;  //配置串口为模式1
  18   1          TMOD &= 0x0F;  //清零T1的控制位
  19   1          TMOD |= 0x20;  //配置T1为模式2
  20   1          TH1 = 256 - (11059200/12/32)/baud;  //计算T1重载值
  21   1          TL1 = TH1;     //初值等于重载值
  22   1          ET1 = 0;       //禁止T1中断
  23   1          ES  = 1;       //使能串口中断
  24   1          TR1 = 1;       //启动T1
  25   1      }
  26          /* 软件延时函数，延时时间(t*10)us */
  27          void DelayX10us(unsigned char t)
  28          {
  29   1          do {
  30   2              _nop_();
  31   2              _nop_();
  32   2              _nop_();
  33   2              _nop_();
  34   2              _nop_();
  35   2              _nop_();
  36   2              _nop_();
  37   2              _nop_();
  38   2          } while (--t);
  39   1      }
  40          /* 串口数据写入，即串口发送函数，buf-待发送数据的指针，len-指定的发送长度 */
  41          void UartWrite(unsigned char *buf, unsigned char len)
  42          {
  43   1          RS485_DIR = 1;  //RS485设置为发送
  44   1          while (len--)   //循环发送所有字节
  45   1          {
  46   2              flagTxd = 0;      //清零发送标志
  47   2              SBUF = *buf++;    //发送一个字节数据
  48   2              while (!flagTxd); //等待该字节发送完成
  49   2          }
  50   1          DelayX10us(5);  //等待最后的停止位完成，延时时间由波特率决定
  51   1          RS485_DIR = 0;  //RS485设置为接收
  52   1      }
  53          /* 串口数据读取函数，buf-接收指针，len-指定的读取长度，返回值-实际读到的长度 */
  54          unsigned char UartRead(unsigned char *buf, unsigned char len)
C51 COMPILER V9.54   RS485                                                                 02/17/2024 22:29:09 PAGE 2   

  55          {
  56   1          unsigned char i;
  57   1          
  58   1          if (len > cntRxd)  //指定读取长度大于实际接收到的数据长度时，
  59   1          {                  //读取长度设置为实际接收到的数据长度
  60   2              len = cntRxd;
  61   2          }
  62   1          for (i=0; i<len; i++)  //拷贝接收到的数据到接收指针上
  63   1          {
  64   2              *buf++ = bufRxd[i];
  65   2          }
  66   1          cntRxd = 0;  //接收计数器清零
  67   1          
  68   1          return len;  //返回实际读取长度
  69   1      }
  70          /* 串口接收监控，由空闲时间判定帧结束，需在定时中断中调用，ms-定时间隔 */
  71          void UartRxMonitor(unsigned char ms)
  72          {
  73   1          static unsigned char cntbkp = 0;
  74   1          static unsigned char idletmr = 0;
  75   1      
  76   1          if (cntRxd > 0)  //接收计数器大于零时，监控总线空闲时间
  77   1          {
  78   2              if (cntbkp != cntRxd)  //接收计数器改变，即刚接收到数据时，清零空闲计时
  79   2              {
  80   3                  cntbkp = cntRxd;
  81   3                  idletmr = 0;
  82   3              }
  83   2              else                   //接收计数器未改变，即总线空闲时，累积空闲时间
  84   2              {
  85   3                  if (idletmr < 30)  //空闲计时小于30ms时，持续累加
  86   3                  {
  87   4                      idletmr += ms;
  88   4                      if (idletmr >= 30)  //空闲时间达到30ms时，即判定为一帧接收完毕
  89   4                      {
  90   5                          flagFrame = 1;  //设置帧接收完成标志
  91   5                      }
  92   4                  }
  93   3              }
  94   2          }
  95   1          else
  96   1          {
  97   2              cntbkp = 0;
  98   2          }
  99   1      }
 100          /* 串口驱动函数，监测数据帧的接收，调度功能函数，需在主循环中调用 */
 101          void UartDriver()
 102          {
 103   1          unsigned char len;
 104   1          unsigned char pdata buf[40];
 105   1      
 106   1          if (flagFrame) //有命令到达时，读取处理该命令
 107   1          {
 108   2              flagFrame = 0;
 109   2              len = UartRead(buf, sizeof(buf)-2); //将接收到的命令读取到缓冲区中
 110   2              UartAction(buf, len);  //传递数据帧，调用动作执行函数
 111   2          }
 112   1      }
 113          /* 串口中断服务函数 */
 114          void InterruptUART() interrupt 4
 115          {
 116   1          if (RI)  //接收到新字节
C51 COMPILER V9.54   RS485                                                                 02/17/2024 22:29:09 PAGE 3   

 117   1          {
 118   2              RI = 0;  //清零接收中断标志位
 119   2              if (cntRxd < sizeof(bufRxd)) //接收缓冲区尚未用完时，
 120   2              {                            //保存接收字节，并递增计数器
 121   3                  bufRxd[cntRxd++] = SBUF;
 122   3              }
 123   2          }
 124   1          if (TI)  //字节发送完毕
 125   1          {
 126   2              TI = 0;   //清零发送中断标志位
 127   2              flagTxd = 1;  //设置字节发送完成标志
 128   2          }
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    277    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     64      40
   DATA SIZE        =      3       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
